{"version":3,"sources":["../src/index.js"],"names":["Bus","historySettings","_streams","Map","_getStreamWithSlicedHistory","type","sliceCount","historyLengthForStream","_historySettings","get","eventsToSkip","_selectStream","pipe","asObservable","_subjectsEmitter","ReplaySubject","_initReplaySubjects","currentStream","Number","isInteger","has","payload","next","_addNewStream","Subject","entries","value","stream","set","_updateMainStream"],"mappings":";;;;;;;;;;AAEA;;AACA;;;;IAWqBA,G;AAKnB,eAAYC,eAAZ,EAAkD;AAAA;;AAAA;;AAAA,SAHlDC,QAGkD,GAHd,IAAIC,GAAJ,EAGc;;AAAA,SA6BlDC,2BA7BkD,GA6BpB,UAACC,IAAD,EAAkBC,UAAlB,EAAqD;AACjF,UAAMC,yBAAyB,MAAKC,gBAAL,CAAsBC,GAAtB,CAA0BJ,IAA1B,CAA/B;AACA,UAAMK,eAAeH,yBAAyBD,UAA9C;;AAEA,aAAO,MAAKK,aAAL,CAAmBN,IAAnB,EACJO,IADI,CACC,qBAAKF,YAAL,CADD,EAEJG,YAFI,EAAP;AAGD,KApCiD;;AAChD,SAAKC,gBAAL,GAAyB,IAAIC,mBAAJ,EAAD,CAAsBH,IAAtB,CAA2B,0BAA3B,CAAxB;AACA,SAAKJ,gBAAL,GAAwBP,mBAAmB,IAAIE,GAAJ,EAA3C;;AAEA,QAAIF,eAAJ,EAAqB;AACnB,WAAKe,mBAAL,CAAyBf,eAAzB;AACD;AACF;;;;2BAEMI,I,EAAiBC,U,EAAiC;AAAA;;AACvD,UAAMW,gBAAgB,KAAKN,aAAL,CAAmBN,IAAnB,CAAtB;;AAEA,aAAO,eACL;AAAA,eAAMa,OAAOC,SAAP,CAAiBb,UAAjB,KAAgC,OAAKE,gBAAL,CAAsBY,GAAtB,CAA0Bf,IAA1B,CAAtC;AAAA,OADK,EAEL,KAAKD,2BAAL,CAAiCC,IAAjC,EAAuCC,UAAvC,CAFK,EAGLW,aAHK,CAAP;AAKD;;;oCAEe;AACd,aAAO,KAAKH,gBAAL,CAAsBD,YAAtB,EAAP;AACD;;;+BAEoC;AAAA,UAA9BR,IAA8B,QAA9BA,IAA8B;AAAA,UAAxBgB,OAAwB,QAAxBA,OAAwB;;AACnC,UAAMJ,gBAAgB,KAAKN,aAAL,CAAmBN,IAAnB,CAAtB;;AAEAY,oBAAcK,IAAd,CAAmB,EAAEjB,UAAF,EAAQgB,gBAAR,EAAnB;AACD;;;kCAWahB,I,EAAiB;AAC7B,UAAI,CAAC,KAAKH,QAAL,CAAckB,GAAd,CAAkBf,IAAlB,CAAL,EAA8B;AAC5B,aAAKkB,aAAL,CAAmBlB,IAAnB,EAAyB,IAAImB,aAAJ,EAAzB;AACD;;AAED,aAAO,KAAKtB,QAAL,CAAcO,GAAd,CAAkBJ,IAAlB,CAAP;AACD;;;sCAEiBA,I,EAAiB;AACjC,WAAKS,gBAAL,CAAsBQ,IAAtB,CAA2B,KAAKpB,QAAL,CAAcO,GAAd,CAAkBJ,IAAlB,CAA3B;AACD;;;wCAEmBJ,e,EAAqC;AAAA;AAAA;AAAA;;AAAA;AACvD,6BAA0BA,gBAAgBwB,OAAhB,EAA1B,8HAAqD;AAAA;AAAA,cAA3CpB,IAA2C;AAAA,cAArCqB,KAAqC;;AACnD,eAAKH,aAAL,CAAmBlB,IAAnB,EAAyB,IAAIU,mBAAJ,CAAkBW,KAAlB,CAAzB;AACD;AAHsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIxD;;;kCAEarB,I,EAAiBsB,M,EAAiC;AAC9D,WAAKzB,QAAL,CAAc0B,GAAd,CAAkBvB,IAAlB,EAAwBsB,MAAxB;AACA,WAAKE,iBAAL,CAAuBxB,IAAvB;AACD;;;;;;kBAhEkBL,G","file":"index.js","sourcesContent":["// @flow\n\nimport { Subject, Observable, ReplaySubject, iif } from 'rxjs'\nimport { mergeAll, skip } from 'rxjs/operators';\n\ntype EventType = 'event:type_1' | 'event:type_2'\n\ntype Event = {\n  type: EventType,\n  payload: *,\n}\n\ntype BusHistorySettings = Map<EventType, number>\n\nexport default class Bus {\n  _subjectsEmitter: Subject\n  _streams: Map<EventType, Subject> = new Map()\n  _historySettings: BusHistorySettings\n\n  constructor(historySettings?: BusHistorySettings) {\n    this._subjectsEmitter = (new ReplaySubject()).pipe(mergeAll())\n    this._historySettings = historySettings || new Map()\n\n    if (historySettings) {\n      this._initReplaySubjects(historySettings)\n    }\n  }\n\n  select(type: EventType, sliceCount?: number): Observable {\n    const currentStream = this._selectStream(type)\n\n    return iif(\n      () => Number.isInteger(sliceCount) && this._historySettings.has(type),\n      this._getStreamWithSlicedHistory(type, sliceCount),\n      currentStream,\n    )\n  }\n\n  getMainStream() {\n    return this._subjectsEmitter.asObservable();\n  }\n\n  emit({ type, payload }: Event): void {\n    const currentStream = this._selectStream(type)\n\n    currentStream.next({ type, payload })\n  }\n\n  _getStreamWithSlicedHistory = (type: EventType, sliceCount: number): Observable => {\n    const historyLengthForStream = this._historySettings.get(type)\n    const eventsToSkip = historyLengthForStream - sliceCount\n\n    return this._selectStream(type)\n      .pipe(skip(eventsToSkip))\n      .asObservable()\n  }\n\n  _selectStream(type: EventType) {\n    if (!this._streams.has(type)) {\n      this._addNewStream(type, new Subject())\n    }\n\n    return this._streams.get(type)\n  }\n\n  _updateMainStream(type: EventType) {\n    this._subjectsEmitter.next(this._streams.get(type));\n  }\n\n  _initReplaySubjects(historySettings: BusHistorySettings) {\n    for (var [type, value] of historySettings.entries()) {\n      this._addNewStream(type, new ReplaySubject(value))\n    }\n  }\n\n  _addNewStream(type: EventType, stream: Subject | ReplaySubject) {\n    this._streams.set(type, stream)\n    this._updateMainStream(type)\n  }\n}\n"]}